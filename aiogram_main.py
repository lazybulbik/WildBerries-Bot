from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre, link
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions, InputFile, InputMedia
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import asyncio
import random
from fuzzywuzzy import fuzz
from qiwip2py import QiwiP2P
from datetime import timedelta

import Menu
import Config
import WildBerries
import db
import Processing

bot = Bot(Config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

p2p = QiwiP2P(secret_key=Config.QIWI_TOKEN)

admin_id = 5061120370

humiliation = 6


class Forms(Helper):
    mode = HelperMode.snake_case

    STATISTICS = ListItem()
    MONITORING_SET_URL1 = ListItem()
    MONITORING_SET_URL2 = ListItem()
    MONITORING_SET_URL3 = ListItem()
    FEEDBACK = ListItem()
    FIND = ListItem()


def check_premium(chat_id):
    if db.get_data(user_id=chat_id)[0][2] == 0:
        return False

    else:
        return True


@dp.message_handler(commands=['limits'], state='*')
async def limits(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if check_premium(message.from_user.id):
        premium_days = db.get_data(user_id=message.from_user.id)[0][2]
        await message.answer(f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {premium_days} –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞. \
                             \n–ó–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', reply_markup=Menu.main_menu)

    else:
        search_limit = db.get_data(user_id=message.from_user.id)[0][10]
        await message.answer(f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {search_limit} –∏–∑ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤. \
                             \n–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ premium - /donate',
                             reply_markup=Menu.main_menu)

    await state.reset_state()


@dp.message_handler(commands=['recomendation'], state='*')
async def recomendation(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if check_premium(message.from_user.id):
        if db.get_data(user_id=message.from_user.id)[0][9] == '1':
            db.update_data(data={'recomendation': '0'}, id=message.from_user.id)
            await message.answer('–ü–æ–¥–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω', reply_markup=Menu.main_menu)

        else:
            db.update_data(data={'recomendation': '1'}, id=message.from_user.id)
            await message.answer('–ü–æ–¥–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∫–ª—é—á–µ–Ω', reply_markup=Menu.main_menu)

    else:
        await message.answer('–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∫–æ–º–µ–¥–∞—Ü–∏—è–º', reply_markup=Menu.main_menu)

    await state.reset_state()


@dp.message_handler(commands=['donate'])
async def donate(message: types.Message):
    await message.answer_photo(InputFile('media/premium_buy.jpg'), '*Premium* \
                                                        \n\n*–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ?* \
                                                          \n*1.* –ö–æ–Ω–µ—á–Ω–æ –∂–µ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –±–æ—Ç–∞, –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :) \
                                                          \n*2.* –í—ã - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ \
                                                          \n*3.* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å 1 –¥–æ 3 \
                                                          \n*4.* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å —Ç–æ–≤–∞—Ä–æ–≤\
                                                          \n*5.* –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–∏—Å–∫–æ–≤ \
                                                        \n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π*: 99—Ä—É–±. \n*–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ –¥–µ–Ω—å–≥–∏ —Å–∞–º–∏ –ù–ï —Å–ø–∏—à—É—Ç—Å—è* \
                                                        \n\n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É :)',
                               parse_mode=types.ParseMode.MARKDOWN, reply_markup=Menu.premium_buy_menu)


@dp.message_handler(commands=['givepr'])
async def give_premium(message: types.Message):
    if message.from_user.id == admin_id:
        text = message.text.replace('/givepr ', '').split()

        if len(text) == 2:
            if message.from_user.id in [i[0] for i in db.get_data()]:

                db.update_data(id=text[0], data={'premium': text[1]})

                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {text[0]} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {text[1]} –¥–Ω–µ–π')
                await bot.send_message(text[0], f'–í–∞–º –≤—ã–¥–∞–ª–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ {text[1]} –¥–Ω–µ–π!ü•≥')

            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')


@dp.message_handler(commands=['start'], state='*')  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
async def on_message(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    db.create_user(message)

    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è –í–∞–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–∞–º–∏–ª—å–∫–æ–π \n–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–≤–µ–¥—è /help',
        reply_markup=Menu.main_menu)

    await state.reset_state()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—à–æ–± –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º)


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    await message.answer('*–ö—Ä–∞—Ç–∫–æ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞* \
                        \n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:* \
                        \n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä. \
                        \n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–¥–µ–ª–∞–µ—Ç –±–æ—Ç) \
                      \n\n*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞:* \
                        \n–û—Ç—Å–ª–µ–∂–∏–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä –∏ —Å–æ–æ–±—â–∞–µ—Ç –ø—Ä–∏ –µ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ \
                        \n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã–±–µ—Ä–µ—Ç–µ –≤ –∫–∞–∫–æ–π —Å–ª–æ—Ç –∑–∞–Ω–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª. –ì–æ—Ç–æ–≤–æ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\
                      \n\n*–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä:* \
                        \n–ü–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \
                        \n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç 3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ \
                      \n\n*Premium* \
                        \n–î–∞–µ—Ç –≤–∞–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ—á–∏–∞—Ç—å –≤ /donate', parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=Menu.main_menu)

    await state.reset_state()


@dp.message_handler(lambda message: not (message.entities))  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def on_message(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if message.text == Menu.statisics.text:  # –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..', reply_markup=Menu.back_menu)
        await state.set_state(Forms.STATISTICS[0])

    elif message.text == Menu.monitoring.text:  # –∫–Ω–æ–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
        premium = check_premium(message.from_user.id)

        url_1 = db.get_data(user_id=message.from_user.id)[0][5].split(' - ')[2]
        url_2 = db.get_data(user_id=message.from_user.id)[0][6].split(' - ')[2]
        url_3 = db.get_data(user_id=message.from_user.id)[0][7].split(' - ')[2]

        monitoring_menu = Menu.create_monitoring_menu(premium, message.from_user.id)

        await message.answer(f'*–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:* \
                              \n*–¢–æ–≤–∞—Ä 1:* {url_1} \
                              \n*–¢–æ–≤–∞—Ä 2:* {url_2} \
                              \n*–¢–æ–≤–∞—Ä 3:* {url_3}', parse_mode=types.ParseMode.MARKDOWN, reply_markup=monitoring_menu)


    elif message.text == Menu.feedback.text:  # –∫–Ω–æ–ø–∫–∞ –æ—Ç–∑—ã–≤–∞
        await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–Ω–µ–Ω–∏–µ–º –æ –±–æ—Ç–µ', reply_markup=Menu.back_menu)
        await state.set_state(Forms.FEEDBACK[0])

    elif message.text == Menu.find_product.text:  # –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏..', reply_markup=Menu.back_menu)
        await state.set_state(Forms.FIND[0])


@dp.message_handler(lambda message: not (message.entities), state=Forms.STATISTICS[0])
async def statistics(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    limits = db.get_data(user_id=message.from_user.id)[0][10]

    if message.text == Menu.back.text:  # –≤–æ–∑—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞', reply_markup=Menu.main_menu)
        await state.reset_state()
        return

    if check_premium(message.from_user.id) or limits != 0:
        if not check_premium(message.from_user.id):
            await asyncio.sleep(humiliation)

        result = WildBerries.create_statistics(message.text)

        await message.answer(f'*–¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É {message.text}* \n{result}', parse_mode=types.ParseMode.MARKDOWN)

        if check_premium(message.from_user.id):
            if result != '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã':
                if db.get_data(user_id=message.from_user.id)[0][8] == None:
                    db.update_data(data={'white_category': message.text}, id=message.from_user.id)

                else:
                    db.update_data(
                        data={'white_category': db.get_data(user_id=message.from_user.id)[0][8] + ', ' + message.text},
                        id=message.from_user.id)

        else:
            db.update_data(data={'limits': limits - 1}, id=message.from_user.id)

    else:
        await message.answer('–í–∞—à–µ –∫–æ–ª-–≤–æ –ø–æ–∏—Å–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω–æ. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞', reply_markup=Menu.main_menu)
        await state.reset_state()


@dp.message_handler(lambda message: not (message.entities), state=Forms.FEEDBACK[0])
async def feedback(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if message.text == Menu.back.text:
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞', reply_markup=Menu.main_menu)
        await state.reset_state()
        return

    review = (message.text.lower()).split()

    for word in review:
        for censored_word in Config.censorship:
            if fuzz.ratio(censored_word, word) > 70:
                await message.answer('–ú–æ—è —Ü–µ–Ω–∑—É—Ä–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ')
                return

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', reply_markup=Menu.main_menu)
    await bot.send_message(admin_id, f'*–û—Ç–∑—ã–≤ –æ—Ç {message.from_user.first_name}:* \n{message.text}',
                           parse_mode=types.ParseMode.MARKDOWN)

    await state.reset_state()


@dp.message_handler(lambda message: not (message.entities), state=Forms.FIND[0])
async def find_product(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    limits = db.get_data(user_id=message.from_user.id)[0][10]

    if message.text == Menu.back.text:  # –≤–æ–∑—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞', reply_markup=Menu.main_menu)
        await state.reset_state()
        return

    if check_premium(message.from_user.id) or limits != 0:
        await message.answer('–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–Ω—Ç—ã.. üßê')

        if not check_premium(message.from_user.id):
            await asyncio.sleep(humiliation)

        idies = WildBerries.selection(message.text)

        if '0000000000000000' in idies:
            await message.answer_photo(InputFile('media/none.jpg'), '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã')
            return

        idq = idies.pop(idies.index(random.choice(idies)))
        print(idq)
        photo_0 = WildBerries.get_card(idq)

        idq = idies.pop(idies.index(random.choice(idies)))
        print(idq)
        photo_1 = WildBerries.get_card(idq)

        idq = idies.pop(idies.index(random.choice(idies)))
        print(idq)
        photo_2 = WildBerries.get_card(idq)

        try:
            await bot.send_media_group(message.from_user.id, photo_0)
        except Exception as e:
            print(e)

        try:
            await bot.send_media_group(message.from_user.id, photo_1)
        except Exception as e:
            print(e)

        try:
            await bot.send_media_group(message.from_user.id, photo_2)
        except Exception as e:
            print(e)

        await message.answer('*–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã: *' + ', '.join(WildBerries.get_similar_queries(message.text)),
                             parse_mode=ParseMode.MARKDOWN)

        if check_premium(message.from_user.id):
            if db.get_data(user_id=message.from_user.id)[0][8] == None:
                db.update_data(data={'white_category': message.text}, id=message.from_user.id)

            else:
                db.update_data(
                    data={'white_category': db.get_data(user_id=message.from_user.id)[0][8] + ', ' + message.text},
                    id=message.from_user.id)

        else:
            db.update_data(data={'limits': limits - 1}, id=message.from_user.id)

    else:
        await message.answer('–í–∞—à–µ –∫–æ–ª-–≤–æ –ø–æ–∏—Å–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω–æ. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞', reply_markup=Menu.main_menu)
        await state.reset_state()


@dp.message_handler(lambda message: not (message.entities) or message.entities[0].type == 'url',
                    state=[Forms.MONITORING_SET_URL1[0], Forms.MONITORING_SET_URL2[0], Forms.MONITORING_SET_URL3[0]])
async def monitoring_set_url1(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if await state.get_state() == 'monitoring_set_url1':
        db_key = 'url_0'

    elif await state.get_state() == 'monitoring_set_url2':
        db_key = 'url_1'

    else:
        db_key = 'url_2'

    if 'https' in message.text:
        articul = message.text.split('/')[4]
    else:
        articul = message.text

    card = WildBerries.get_card(articul, provider='card')

    if card != False:
        db.update_data(id=message.from_user.id,
                       data={db_key: str(articul) + ' - ' + str(card['price']) + ' - ' + card['name']})

        premium = check_premium(message.from_user.id)

        url_1 = db.get_data(user_id=message.from_user.id)[0][5].split(' - ')[2]
        url_2 = db.get_data(user_id=message.from_user.id)[0][6].split(' - ')[2]
        url_3 = db.get_data(user_id=message.from_user.id)[0][7].split(' - ')[2]

        monitoring_menu = Menu.create_monitoring_menu(premium, message.from_user.id)

        await message.answer(f'*–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:* \
                              \n*–¢–æ–≤–∞—Ä 1:* {url_1} \
                              \n*–¢–æ–≤–∞—Ä 2:* {url_2} \
                              \n*–¢–æ–≤–∞—Ä 3:* {url_3}', parse_mode=types.ParseMode.MARKDOWN, reply_markup=monitoring_menu)

        await state.reset_state()

    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(state='*')
async def process_callback_button(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    premium = check_premium(callback_query.from_user.id)

    if callback_query.data == 'back':
        url_1 = db.get_data(user_id=callback_query.from_user.id)[0][5].split(' - ')[2]
        url_2 = db.get_data(user_id=callback_query.from_user.id)[0][6].split(' - ')[2]
        url_3 = db.get_data(user_id=callback_query.from_user.id)[0][7].split(' - ')[2]

        monitoring_menu = Menu.create_monitoring_menu(premium, callback_query.from_user.id)

        await bot.edit_message_text(f'*–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:* \
                              \n*–¢–æ–≤–∞—Ä 1:* {url_1} \
                              \n*–¢–æ–≤–∞—Ä 2:* {url_2} \
                              \n*–¢–æ–≤–∞—Ä 3:* {url_3}', callback_query.from_user.id, callback_query.message.message_id,
                                    parse_mode=types.ParseMode.MARKDOWN, reply_markup=monitoring_menu)

        await state.reset_state()

    if callback_query.data == 'url1_set':
        await bot.edit_message_text('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞', callback_query.from_user.id,
                                    callback_query.message.message_id, reply_markup=Menu.inline_back_menu)
        await state.set_state(Forms.MONITORING_SET_URL1[0])

    if callback_query.data == 'url2_set':
        await bot.edit_message_text('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞', callback_query.from_user.id,
                                    callback_query.message.message_id, reply_markup=Menu.inline_back_menu)
        await state.set_state(Forms.MONITORING_SET_URL2[0])

    if callback_query.data == 'url3_set':
        await bot.edit_message_text('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞', callback_query.from_user.id,
                                    callback_query.message.message_id, reply_markup=Menu.inline_back_menu)
        await state.set_state(Forms.MONITORING_SET_URL3[0])

    if callback_query.data in ['url1_remove', 'url2_remove', 'url3_remove']:

        if callback_query.data == 'url1_remove':
            db_key = 'url_0'

        elif callback_query.data == 'url2_remove':
            db_key = 'url_1'

        else:
            db_key = 'url_2'

        db.update_data(id=callback_query.from_user.id, data={db_key: 'n - n - –Ω–µ –∑–∞–¥–∞–Ω–æ'})

        url_1 = db.get_data(user_id=callback_query.from_user.id)[0][5].split(' - ')[2]
        url_2 = db.get_data(user_id=callback_query.from_user.id)[0][6].split(' - ')[2]
        url_3 = db.get_data(user_id=callback_query.from_user.id)[0][7].split(' - ')[2]

        monitoring_menu = Menu.create_monitoring_menu(premium, callback_query.from_user.id)

        await bot.edit_message_text(f'*–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:* \
                              \n*–¢–æ–≤–∞—Ä 1:* {url_1} \
                              \n*–¢–æ–≤–∞—Ä 2:* {url_2} \
                              \n*–¢–æ–≤–∞—Ä 3:* {url_3}', callback_query.from_user.id, callback_query.message.message_id,
                                    parse_mode=types.ParseMode.MARKDOWN, reply_markup=monitoring_menu)

    if callback_query.data == 'buy_premium':
        if not check_premium(callback_query.from_user.id):
            bill_id = callback_query.message.message_id + random.randint(0, 999999999)

            bill = p2p.create_bill(bill_id=bill_id, amount=99, expiration_datetime=timedelta(minutes=15))

            text = f'*Premium | –û–ø–ª–∞—Ç–∞* \
                \n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 99—Ä—É–±.\
                  \n–í—Ä–µ–º—è –¥–µ—Å—Ç–≤–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: 15 –º–∏–Ω—É—Ç\
                  \n{link("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", bill.pay_url)}'

            await bot.send_message(callback_query.from_user.id, text,
                                   reply_markup=Menu.create_payments_menu(bill.pay_url, bill_id),
                                   parse_mode=types.ParseMode.MARKDOWN)

        else:
            await bot.send_message(callback_query.from_user.id, f'–£ –≤–∞c —É–∂–µ –∏–º–µ–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞')

    if 'payments_check' in callback_query.data:
        check = p2p.get_bill(callback_query.data.split(':')[1])

        if check:
            if check.status_value == 'PAID':

                db.update_data(id=callback_query.from_user.id, data={'premium': 30})
                await bot.send_message(callback_query.from_user.id,
                                       '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π. –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã!ü•≥')
                await bot.send_message(callback_query.from_user.id, '–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∞–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–ø–¥–æ—á—Ç–µ–Ω–∏–π. \
                                                                    \n–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–≤–µ–¥–∏—Ç–µ /recomendation \
                                                                    \n–¢–∞–∫ –∂–µ –≤–≤–µ–¥—è /limits –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏')

                await bot.edit_message_text('–û–ø–ª–∞—á–µ–Ω–æ!', callback_query.message.chat.id, callback_query.message.message_id)

            else:
                await bot.send_message(callback_query.from_user.id, '–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!')

        else:
            await bot.send_message(callback_query.from_user.id, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É')


executor.start_polling(dp)
